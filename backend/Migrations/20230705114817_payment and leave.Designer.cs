// <auto-generated />
using System;
using AppoinmentScheduler.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppoinmentScheduler.Migrations
{
    [DbContext(typeof(AppoinmentSchedulerContext))]
    [Migration("20230705114817_payment and leave")]
    partial class paymentandleave
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppoinmentScheduler.Model.AppointmentModel", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime?>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<float?>("AppointmentFees")
                        .HasColumnType("real");

                    b.Property<string>("AppointmentReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppointmentRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppointmentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppointmentTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool?>("MedicalrecordStatus")
                        .HasColumnType("bit");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppointmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("AppointmentModel");
                });

            modelBuilder.Entity("AppoinmentScheduler.Model.DoctorLeaveModel", b =>
                {
                    b.Property<int>("LeaveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeaveId"));

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LeaveFrom")
                        .HasColumnType("datetime2");

                    b.Property<string>("LeaveReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LeaveTo")
                        .HasColumnType("datetime2");

                    b.HasKey("LeaveId");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorLeaveModel");
                });

            modelBuilder.Entity("AppoinmentScheduler.Model.DoctorModel", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"));

                    b.Property<string>("DoctorAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorDesignation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("DoctorFees")
                        .HasColumnType("real");

                    b.Property<string>("DoctorMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorQualification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DoctorId");

                    b.ToTable("DoctorModel");
                });

            modelBuilder.Entity("AppoinmentScheduler.Model.MedicalRecordModel", b =>
                {
                    b.Property<int>("MedicalRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalRecordId"));

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("AttenderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Height")
                        .HasColumnType("real");

                    b.Property<string>("MedicalRecordRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MedicalRecordTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<float?>("Pressure")
                        .HasColumnType("real");

                    b.Property<float?>("Temperature")
                        .HasColumnType("real");

                    b.Property<float?>("Weight")
                        .HasColumnType("real");

                    b.HasKey("MedicalRecordId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalRecordModel");
                });

            modelBuilder.Entity("AppoinmentScheduler.Model.PatientModel", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<bool?>("PatientAccountStatus")
                        .HasColumnType("bit");

                    b.Property<string>("PatientAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientAge")
                        .HasColumnType("int");

                    b.Property<string>("PatientBloodGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PatientDOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("PatientEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientGender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientId");

                    b.ToTable("PatientModel");
                });

            modelBuilder.Entity("AppoinmentScheduler.Model.PaymentModel", b =>
                {
                    b.Property<int>("paymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("paymentId"));

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("paymentAmount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("paymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("paymentRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("paymentTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("transactionId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("paymentId");

                    b.HasIndex("PatientId");

                    b.ToTable("PaymentModel");
                });

            modelBuilder.Entity("AppoinmentScheduler.Model.PrescriptionModel", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionId"));

                    b.Property<string>("Allergy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("Disease")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Prescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrescriptionRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PrescriptionTimestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("PrescriptionId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("DoctorId");

                    b.ToTable("PrescriptionModel");
                });

            modelBuilder.Entity("AppoinmentScheduler.Model.UserModel", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("UserStatus")
                        .HasColumnType("bit");

                    b.HasKey("UserId");

                    b.HasIndex("DoctorId");

                    b.ToTable("UserModel");
                });

            modelBuilder.Entity("AppoinmentScheduler.Model.AppointmentModel", b =>
                {
                    b.HasOne("AppoinmentScheduler.Model.DoctorModel", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("AppoinmentScheduler.Model.PatientModel", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("AppoinmentScheduler.Model.DoctorLeaveModel", b =>
                {
                    b.HasOne("AppoinmentScheduler.Model.DoctorModel", "doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.Navigation("doctor");
                });

            modelBuilder.Entity("AppoinmentScheduler.Model.MedicalRecordModel", b =>
                {
                    b.HasOne("AppoinmentScheduler.Model.AppointmentModel", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId");

                    b.HasOne("AppoinmentScheduler.Model.PatientModel", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("Appointment");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("AppoinmentScheduler.Model.PaymentModel", b =>
                {
                    b.HasOne("AppoinmentScheduler.Model.PatientModel", "patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("patient");
                });

            modelBuilder.Entity("AppoinmentScheduler.Model.PrescriptionModel", b =>
                {
                    b.HasOne("AppoinmentScheduler.Model.AppointmentModel", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId");

                    b.HasOne("AppoinmentScheduler.Model.DoctorModel", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.Navigation("Appointment");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("AppoinmentScheduler.Model.UserModel", b =>
                {
                    b.HasOne("AppoinmentScheduler.Model.DoctorModel", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.Navigation("Doctor");
                });
#pragma warning restore 612, 618
        }
    }
}
